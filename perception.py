"""
perception.py

Code for modelling option and outcome perceptions.
"""

from base_types import Certainty

class Percept:
  """
  Base class for all percepts, modelling general player perceptions of options
  & outcomes (relative to player goals). A percept applies to a specific goal,
  and is generated by a specific option at a specific choice. The 'valence' may
  be "negative", "neutral", or "positive" or may be a number between -1 and 1.
  """
  def __init__(
    self,
    goal=None,
    choice=None,
    option=None,
    valence=Valence.neutral
  ):
    """
    goal:
      The goal name that this percept applies to.
    choice:
      The choice *object* that this percept is generated by.
    option:
      The option name at that choice, or None to specify a general percept of
      the choice.
    valence:
      The positive or negative alignment of this percept. Should be "positive",
      "negative", or "neutral", or else a number between -1 and 1.
    """
    self.goal = goal
    self.choice = choice
    self.option = option
    if isinstance(self.option, str):
      self.option = self.choice.options[self.option] # look up within choice
    self.valence = valence

    def get_option(self):
      """
      Returns the option object associated with this percept, or None if there
      isn't any.
      """
      if self.option:
        return self.choice.options[self.option]
      else:
        return None


class Prospective(Percept):
  """
  A percept generated before making a decision.
  """
  enables = None
  threatens = None
  advances = None
  hinders = None
  def __init__(self, *args, certainty=Certainty.certain, **kwargs):
    """
    In addition to arguments used for creating a general Percept,
    ProspectivePercepts accept a "certainty" argument, which should be either a
    Certainty object (see base_types.py) or a probability between 0 and 1.
    """
    super().__init__(self, *args, **kwargs)
    self.certainty=Certainty(certainty)

class Enables(Prospective):
  """
  "Enables" is a prospective percept indicating that a specific option has the
  possibility of advancing a goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      certainty=Certainty.even,
      valence=Valence.good,
      **kwargs
    )

class Threatens(Prospective):
  """
  "Threatens" is the opposite of "enables": It indicates the possibility that a
  goal will be hindered by an option.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      certainty=Certainty.even,
      valence=Valence.bad,
      **kwargs
    )

class Advances(Prospective):
  """
  "Advances" indicates that choosing the given option should definitely advance
  the specified goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      certainty=Certainty.certain,
      valence=Valence.good,
      **kwargs
    )

class Hinders(Prospective):
  """
  "Hinders" indicates that choosing the given option should definitely hinder
  the specified goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      certainty=Certainty.certain,
      valence=Valence.bad,
      **kwargs
    )


class Retrospective(Percept):
  """
  A percept generated after observing some outcome(s) of a chosen option.
  """
  def __init__(
    self,
    *args,
    prospective=None
    expected_valence=Valence.neutral,
    expected_certainty=Certainty.likely,
    **kwargs
  ):
    super().__init__(self, *args, **kwargs)
    if prospective:
      self.prospective = prospective
    else:
      self.prospective = Prospective(
        goal=self.goal,
        choice=self.chioce,
        option=self.option,
        valence=expected_valence,
        certainty=expected_certainty
      )

class Miserable(Retrospective):
  """
  The perception that an outcome was bad, and that that was known ahead of time.
  """
  # TODO: How to represent difference between choosing a known bad outcome and
  # feeling forced vs. feeling rebellious?
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.bad,
      expected_valence=Valence.bad,
      expected_certainty=Certainty.certain,
      **kwargs
    )

class Mistake(Retrospective):
  """
  The perception that an outcome was bad, but wasn't really foreseeable.
  """
  # TODO: how to model the knowledge/fairness involved/required.
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.bad,
      expected_valence=Valence.okay,
      expected_certainty=Certainty.likely,
      **kwargs
    )

class UnexpectedFailure(Retrospective):
  """
  A decision that seemed good but turned out to be awful.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.bad,
      expected_valence=Valence.good,
      expected_certainty=Certainty.certain,
      **kwargs
    )

class Unfortunate(Retrospective):
  """
  A decision that seemed neutral but turned out bad.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.bad,
      expected_valence=Valence.neutral,
      expected_certainty=Certainty.even,
      **kwargs
    )

class Fortunate(Retrospective):
  """
  A decision that seemed neutral but turned out well.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.good,
      expected_valence=Valence.neutral,
      expected_certainty=Certainty.even,
      **kwargs
    )

class Relief(Retrospective):
  """
  A decision that seemed bad but turned out okay.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.okay,
      expected_valence=Valence.bad,
      expected_certainty=Certainty.likely,
      **kwargs
    )

class Disappointment(Retrospective):
  """
  A decision that seemed okay but turned not great.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.unpleasant,
      expected_valence=Valence.okay,
      expected_certainty=Certainty.even,
      **kwargs
    )

class GoodDecision(Retrospective):
  """
  A decision that seemed good and turned out that way.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.good,
      expected_valence=Valence.good,
      expected_certainty=Certainty.even,
      **kwargs
    )

class ExpectedSuccess(Retrospective):
  """
  A decision that was surely good and turned out that way.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.good,
      expected_valence=Valence.good,
      expected_certainty=Certainty.certain,
      **kwargs
    )

class UnexpectedSuccess(Retrospective):
  """
  An outcome that seemed likely unpleasant but turned out well in the end.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(
      self,
      *args,
      valence=Valence.good,
      expected_valence=Valence.unpleasant,
      expected_certainty=Certainty.likely,
      **kwargs
    )
