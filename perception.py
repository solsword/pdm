"""
perception.py

Code for modelling option and outcome perceptions.
"""

from base_types import Certainty

class Percept:
  """
  Base class for all percepts, modelling general player perceptions of options
  & outcomes (relative to player goals). A percept applies to a specific goal,
  and is generated by a specific option at a specific choice. The 'valence' may
  be "negative", "neutral", or "positive" or may be a number between -1 and 1.
  """
  def __init__(
    self,
    goal=None,
    choice=None,
    option=None,
    valence="neutral"
  ):
    """
    goal:
      The goal name that this percept applies to.
    choice:
      The choice *object* that this percept is generated by.
    option:
      The option name at that choice, or None to specify a general percept of
      the choice.
    valence:
      The positive or negative alignment of this percept. Should be "positive",
      "negative", or "neutral", or else a number between -1 and 1.
    """
    self.goal = goal
    self.choice = choice
    self.option = option
    self.valence = valence

    def get_option(self):
      """
      Returns the option object associated with this percept, or None if there
      isn't any.
      """
      if self.option:
        return self.choice.options[self.option]
      else:
        return None

@super_class_property()
class Prospective(Percept):
  """
  A percept generated before making a decision.
  """
  enables = None
  threatens = None
  advances = None
  hinders = None
  def __init__(self, *args, certainty=Certainty.certain, **kwargs):
    """
    In addition to arguments used for creating a general Percept,
    ProspectivePercepts accept a "certainty" argument, which should be either a
    Certainty object (see base_types.py) or a probability between 0 and 1.
    """
    super().__init__(self, *args, **kwargs)
    self.certainty=Certainty(certainty)

@super_class_property()
class Retrospective(Percept):
  """
  A percept generated after observing some outcome(s) of a chosen option.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(self, *args, valence=Valence.bad, **kwargs)

@super_class_property()
class Enables(Prospective):
  """
  "Enables" is a prospective percept indicating that a specific option has the
  possibility of advancing a goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(self, *args, **kwargs)

@super_class_property()
class Threatens(Prospective):
  """
  "Threatens" is the opposite of "enables": It indicates the possibility that a
  goal will be hindered by an option.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(self, *args, **kwargs)

@super_class_property()
class Advances(Prospective):
  """
  "Advances" indicates that choosing the given option should definitely advance
  the specified goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(self, *args, **kwargs)

@super_class_property()
class Hinders(Prospective):
  """
  "Hinders" indicates that choosing the given option should definitely hinder
  the specified goal.
  """
  def __init__(self, *args, **kwargs):
    super().__init__(self, *args, **kwargs)
